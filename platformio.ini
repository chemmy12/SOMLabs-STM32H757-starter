; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
src_dir = .
boards_dir = boards

[env:somlabs_h757_m7]
platform = ststm32
board = somlabs_h757_m7
framework = stm32cube

; make the linker use hard-float too
extra_scripts = pio_no_relax.py, pio_link_hardfloat.py

; ; Use the CubeMX linker script (adjust the filename if yours differs)
; board_build.ldscript = STM32H757xx_FLASH.ld

; >>> Use your CubeMX linker script (path can be relative)
board_build.ldscript = Makefile\CM7\stm32h757xx_flash_CM7.ld

; Build your CubeMX folders directly
build_src_filter =
;   +<Core/**>
;   +<Drivers/STM32H7xx_HAL_Driver/**>
;   +<Drivers/CMSIS/Device/ST/STM32H7xx/**>
;   +<Drivers/CMSIS/Include/**>

;   ; If you need CMSIS-DSP, allow its C sources but not assembly:
;   +<Drivers/CMSIS/DSP/Source/**>
;   -<Drivers/CMSIS/DSP/Source/**/*.S>
;   -<Drivers/CMSIS/DSP/Source/**/*.s>

;   ; Block everything else inside Drivers
;   -<Drivers/**/Examples/**>
;   -<Drivers/**/Templates/**>
;   -<Drivers/CMSIS/NN/**>

    -<CM7/Core/Src/**>
    ; +<Middlewares/**>            ; keep if you actually use some middleware
    ; -<Core/Startup/**>           ; use framework startup
    -<Drivers/**>                ; use framework HAL/CMSIS sources

    ; +<CM7/Core/Src/main.c>
    ; +<CM7/Core/Src/gpio.c
    ; +<CM7/Core/Src/usart.c>
    ; +<CM7/Core/Src/stm32h7xx_it.c>
    ; +<CM7/Core/Src/stm32h7xx_hal_msp.c>
    +<CM7/Core/Src/**>

    +<Middlewares/Third_Party/FreeRTOS/Source/*.c>
    +<Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/*.c>
    +<Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/*.c>
    +<Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_1.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart_ex.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc_ex.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash_ex.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_hsem.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma_ex.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_i2c.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_i2c_ex.c>
    ; +<Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_exti.c>
    ; +<Common/Src/system_stm32h7xx_dualcore_boot_cm4_cm7.c>
    ; +<startup_stm32h757xx_CM7.s>
    +<src/**>

; Make sure we don't pass linker relax:
build_unflags = 
    -Os 
    -Wl,--relax

build_flags =
;   -I Core/Inc
;   -I Drivers/STM32H7xx_HAL_Driver/Inc
;   -I Drivers/CMSIS/Device/ST/STM32H7xx/Include
;   -I Drivers/CMSIS/Include

    -I CM7/Core/Inc
    -I Drivers/STM32H7xx_HAL_Driver/Inc
    -I Drivers/STM32H7xx_HAL_Driver/Inc/Legacy
    -I Drivers/CMSIS/Device/ST/STM32H7xx/Include
    -I Drivers/CMSIS/Include
    -I Drivers/CMSIS/DSP/Include
    -I Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2
    -I Middlewares/Third_Party/FreeRTOS/Source/include
    -IMiddlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1
    ; cp C:\Users\chemm\STM32Cube\Repository\STM32Cube_FW_H7_V1.12.1\Middlewares\Third_Party\FreeRTOS\Source\portable\GCC\ARM_CM7\r0p1\*  "C:\Users\chemm\workspace\SOMLabs-757 starter\SOMLabs-STM32H757-starter\Middlewares\Third_Party\FreeRTOS\Source\portable\GCC\ARM_CM7\r0p1\"
    -I Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/MemMang




    -DCORE_CM7
    -DUSE_HAL_DRIVER
    -DSTM32H757xx
    -DUSE_PWR_DIRECT_SMPS_SUPPLY
    -DARM_MATH_CM7

    -fno-unwind-tables
    -fno-asynchronous-unwind-tables

    -Wl,--undefined=_printf_float
    -Wl,--undefined=_scanf_float     ; optional, only if you use scanf with floats

    -mcpu=cortex-m7 -mthumb -mfpu=fpv5-d16 -mfloat-abi=hard
    -ffunction-sections -fdata-sections
    -O2

    ; Keep section GC (fine)
    -Wl,--gc-sections


; Turn off deep library scanning (we arenâ€™t using Arduino-like libs)
lib_ldf_mode = off
upload_protocol = stlink
debug_tool = stlink

; ; OpenOCD target that works well for H7 dual-bank parts
; debug_server =
;     openocd
;     -f interface/stlink.cfg
;     -f target/stm32h7x_dual_bank.cfg

monitor_speed = 115200

; [env:somlabs_h757_m7_debug]
; ; extends=somlabs_h757_m7
; ; build_type = debug
; ; ; Stop at main automatically:
; ; debug_init_break = tbreak main
; platform = ststm32
; board = somlabs_h757_m7
; framework = stm32cube
; extra_scripts = pre:pio_no_relax.py, pre:pio_link_hardfloat.py
; board_build.ldscript = Makefile/CM7/stm32h757xx_flash_CM7.ld
; build_src_filter = -<CM7/Core/Src/**>, -<Drivers/**>, +<CM7/Core/Src/main.c>, +<CM7/Core/Src/gpio.c>, +<CM7/Core/Src/usart.c>, +<CM7/Core/Src/stm32h7xx_it.c>, +<CM7/Core/Src/stm32h7xx_hal_msp.c>
; build_flags = -I CM7/Core/Inc -I Drivers/STM32H7xx_HAL_Driver/Inc -I Drivers/STM32H7xx_HAL_Driver/Inc/Legacy -I Drivers/CMSIS/Device/ST/STM32H7xx/Include -I Drivers/CMSIS/Include -DCORE_CM7 -DUSE_HAL_DRIVER -DSTM32H757xx -DUSE_PWR_DIRECT_SMPS_SUPPLY -DARM_MATH_CM7 -fno-unwind-tables -fno-asynchronous-unwind-tables -mcpu=cortex-m7 -mthumb -mfpu=fpv5-d16 -mfloat-abi=hard -ffunction-sections -fdata-sections -Og -g2 -Wl,--gc-sections
; build_unflags = -Os, -Wl,--relax
; lib_ldf_mode = off
; upload_protocol = stlink
; debug_tool = stlink
; debug_init_break = tbreak main
; monitor_speed = 115200